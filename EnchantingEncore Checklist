Bookshelf Detection
☑ Middle 3x3 column no detection. Every where else in a 9x9 cube centered on the table there is detection.
☑ Full chiseled bookshelves count toward enchantment level.
    ☑ add to BlockTags.ENCHANTMENT_POWER_PROVIDER, but only if full.

Chiseled Bookshelves
☑ Add to enchantment level when full.
☐ Enchantments in enchanted books in chiseled bookshelves increase the likelihood that enchantment will be selected as an enchantment, with enchantment power of those enchantments further increasing that likelihood, or the weight.
☐ 100% chance for an enchantment must never be achieved, but you can get very close.

Deciding Enchantment Levels
    Vanilla enchantment level calculations
    - b = number of nearby bookshelves
    - Base enchantment level available (base) = (randomInt(1,8) + floor(b / 2) + randomInt(0,b))
    - Top slot enchantment level = floor(max(base / 3, 1))
    - Middle slot enchantment level = floor((base × 2) / 3 + 1)
    - Bottom slot enchantment level = floor(max(base,b × 2))

  ☑ New enchantment level calculations
    - b = number of nearby bookshelves
    - Base enchantment level available (base) = (randomInt(1,4) + floor(b / 2))
    - Top slot enchantment level = floor(max(base / 3, 1))
    - Middle slot enchantment level = floor((base × 2) / 3 + 1)
    - Bottom slot enchantment level = floor(max(base,b))
    - The effect is that each bookshelf adds a maximum enchantment level, except for the first 8 bookshelves where the base equation is used, starting at a base level of 4 and adding a level every 2 bookshelves.
    - The new enchantment level cap is 50.

As For The Enchantments Themselves
- This is gonna take a while.
☑ A lot of enchanting parameters are defined via data pack. Will keep vanilla values vanilla and add on top of them for higher modified enchantment levels, used to pick enchantments.
☑  Will have to go down the list of enchantments and test different parameters for higher level enchant implementation
☑ Treasure enchantments will be available at level 45, with higher power treasure enchants available at level 50. Weights and modified enchantment levels will need to be defined for those.
☑ Will need to look at side effects of modifying vanilla modified enchantment levels and weights (enchantment providers to things other than the enchantment table).
☑ Pretty much most if not all the implementation of higher level enchantments will be done via datapack. All we need is in there, or if I'm feeling spicy I could code it, but who in their right mind would do that? Datapack is way easier. We'll take it case by case.
☑ Need to tweak protection factor calculations to hit near 100% at max level.
☑ Remove attribute limits as needed

☑ aqua-affinity.json
☑ bane_of_arthropods.json
☑ binding_curse.json
☑ blast_protection.json
☑ breach.json
☑ channeling.json
☑ density.json
☑ depth_strider.json
☑ efficiency.json
☑ feather_falling.json
☑ fire_aspect.json
☑ fire_protection.json
☑ flame.json
☑ fortune.json
☑ frost_walker.json
☑ impaling.json
☑ infinity.json
☑ knockback.json
☑ looting.json
☑ loyalty.json
☑ luck_of_the_sea.json
☑ lure.json
☑ mending.json
☑ multishot.json
☑ piercing.json
☑ power.json
☑ projectile_protection.json
☑ protection.json
☑ punch.json
☑ quick_charge.json
☑ respiration.json
☑ riptide.json
☑ sharpness.json
☑ silk_touch.json
☑ smite.json
☑ soul_speed.json
☑ sweeping_edge.json
☑ swift_sneak.json
☑ thorns.json
☑ unbreaking.json
☑ vanishing_curse.json
☑ wind_burst.json